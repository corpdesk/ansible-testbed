# Ref: https://microk8s.io/docs/install-lxd
# MicroK8s requires some specific settings to work within LXD (these are explained in more detail below). These can be applied using a custom profile. The first step is to create a new profile to use:

lxc profile create microk8s

# Once created, we’ll need to add the rules. If you’re using ZFS, you’ll need this version or, if you’re using ext4, you’ll need this one. 
# There is a section at the end of this document to describe what these rules do.
# Download the profile:
# for ZFS
wget https://raw.githubusercontent.com/ubuntu/microk8s/master/tests/lxc/microk8s-zfs.profile -O microk8s.profile

# for ext4
# wget https://raw.githubusercontent.com/ubuntu/microk8s/master/tests/lxc/microk8s.profile -O microk8s.profile

# We can now pipe that file into the LXD profile.
cat microk8s.profile | lxc profile edit microk8s

# And then clean up.
# rm microk8s.profile

############################################################
## Start an LXD container for MicroK8s
# We can now create the container that MicroK8s will run in.

lxc launch -p default -p microk8s ubuntu:22.04 microk8s-01-node-2
sleep 15

# Note that this command uses the ‘default’ profile, for any existing system settings (networking, storage, etc.) before also applying the ‘microk8s’ profile - the order is important.
# Install MicroK8s in an LXD container

# First, we’ll need to install MicroK8s within the container.

lxc exec microk8s-01-node-2 -- sudo snap install microk8s --classic

## Load AppArmor profiles on boot
# When the LXD container boots it needs to load the AppArmor profiles required by MicroK8s or else you may get the error:
# cannot change profile for the next exec call: No such file or directory
# To automate the profile loading first enter the LXD container with:

lxc shell microk8s-01-node-2

################################
# executed inside the container
# Then create an rc.local file to perform the profile loading:

cat > /etc/rc.local <<EOF
#!/bin/bash

apparmor_parser --replace /var/lib/snapd/apparmor/profiles/snap.microk8s.*
exit 0
EOF

# Make the rc.local executable:

chmod +x /etc/rc.local


################################################
# Enable DNS (Use add-ons)
# MicroK8s uses the minimum of components for a pure, lightweight Kubernetes. However, plenty of extra features are available with a few keystrokes using “add-ons” - pre-packaged components that will provide extra capabilities for your Kubernetes, from simple DNS management to machine learning with Kubeflow!
# To start it is recommended to add DNS management to facilitate communication between services. For applications which need storage, the ‘hostpath-storage’ add-on provides directory space on the host. These are easy to set up:

microk8s enable dns hostpath-storage
exit

##############################

## Exposing Services To Node

# You’ll need to expose the deployment or service to the container itself before you can access it via the LXD container’s IP address. 
# This can be done using kubectl expose. This example will expose the deployment’s port 80 to a port assigned by Kubernetes.

## Microbot

# In this example, we will use Microbot as it provides a simple HTTP endpoint to expose. These steps can be applied to any other deployment.
# First, let’s deploy Microbot (please note this image only works on x86_64).# 

lxc exec microk8s-01-node-2 -- sudo microk8s kubectl create deployment microbot --image=dontrebootme/microbot:v1

# wait for the service to come up
sleep 15

# Then check that the deployment has come up.
lxc exec microk8s-01-node-2 -- sudo microk8s kubectl get all

# As we can see, Microbot is running. Let’s expose it to the LXD container.

lxc exec microk8s-01-node-2 -- sudo microk8s kubectl expose deployment microbot --type=NodePort --port=80 --name=microbot-service


# We can now get the assigned port. In this example, it’s $port.

lxc exec microk8s-01-node-2 -- sudo microk8s kubectl get service microbot-service


##############################################
# refer to the assigned $ip and $port
# With this, we can access Microbot from our host but using the container’s address that we noted earlier.

curl $ip:$port


###############################################
# Dashboard
# The dashboard addon has a built in helper. Start the Kubernetes dashboard

lxc exec microk8s-01-node-2 -- microk8s dashboard-proxy

# and replace 127.0.0.1 with the container’s IP address we noted earlier.


