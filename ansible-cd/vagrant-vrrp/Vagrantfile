# -*- mode: ruby -*-
# vi: set ft=ruby :

# start extra disks
# ref: https://sleeplessbeastie.eu/2021/05/10/how-to-define-multiple-disks-inside-vagrant-using-virtualbox-provider/

# ###############################################################
# require 'fileutils'

# # file operations needs to be relative to this file
# VAGRANT_ROOT = File.dirname(File.expand_path(__FILE__))

# # directory that will contain VDI files
# VAGRANT_DISKS_DIRECTORY = "disks"

# # controller definition
# VAGRANT_CONTROLLER_NAME = "Virtual I/O Device SCSI controller"
# VAGRANT_CONTROLLER_TYPE = "virtio-scsi"

# # define disks
# # The format is filename, size (GB), port (see controller docs)
# local_disks = [
#   { :filename => "disk1", :size => 1, :port => 5 },
#   { :filename => "disk2", :size => 2, :port => 6 },
#   { :filename => "disk3", :size => 1, :port => 25 }
# ]
# # end disks CONFIG
# #############################################

VAGRANTFILE_API_VERSION = "2"
# VAGRANT_EXPERIMENTAL="disks"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # General Vagrant VM configuration.e
  config.vm.box = "bento/ubuntu-22.04"

  # ###################
  # # START DISKS CREATION
  # disks_directory = File.join(VAGRANT_ROOT, VAGRANT_DISKS_DIRECTORY)
  # disks_directory = File.join(VAGRANT_ROOT, VAGRANT_DISKS_DIRECTORY)

  # # create disks before "up" action
  # config.trigger.before :up do |trigger|
  #   trigger.name = "Create disks"
  #   trigger.ruby do
  #     unless File.directory?(disks_directory)
  #       FileUtils.mkdir_p(disks_directory)
  #     end
  #     local_disks.each do |local_disk|
  #       local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
  #       unless File.exist?(local_disk_filename)
  #         puts "Creating \"#{local_disk[:filename]}\" disk"
  #         system("vboxmanage createmedium --filename #{local_disk_filename} --size #{local_disk[:size] * 1024} --format VDI")
  #       end
  #     end
  #   end
  # end

  # # create storage controller on first run
  # unless File.directory?(disks_directory)
  #   config.vm.provider "virtualbox" do |storage_provider|
  #     storage_provider.customize ["storagectl", :id, "--name", VAGRANT_CONTROLLER_NAME, "--add", VAGRANT_CONTROLLER_TYPE, '--hostiocache', 'off']
  #   end
  # end

  # # attach storage devices
  # config.vm.provider "virtualbox" do |storage_provider|
  #   local_disks.each do |local_disk|
  #     local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
  #     unless File.exist?(local_disk_filename)
  #       storage_provider.customize ['storageattach', :id, '--storagectl', VAGRANT_CONTROLLER_NAME, '--port', local_disk[:port], '--device', 0, '--type', 'hdd', '--medium', local_disk_filename]
  #     end
  #   end
  # end

  # # cleanup after "destroy" action
  # config.trigger.after :destroy do |trigger|
  #   trigger.name = "Cleanup operation"
  #   trigger.ruby do
  #     # the following loop is now obsolete as these files will be removed automatically as machine dependency
  #     local_disks.each do |local_disk|
  #       local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
  #       if File.exist?(local_disk_filename)
  #         puts "Deleting \"#{local_disk[:filename]}\" disk"
  #         system("vboxmanage closemedium disk #{local_disk_filename} --delete")
  #       end
  #     end
  #     if File.exist?(disks_directory)
  #       FileUtils.rmdir(disks_directory)
  #     end
  #   end
  # end
  # # END DISKS CREATION
  # ###################
  # config.vm.disk :disk, size: "5GB", name: "extdisk-01"
  # config.vm.disk :disk, size: "5GB", name: "extdisk-02"
  # config.vm.synced_folder "/media/emp-06/emp-04-d2/extr-vagrant-disk/", "/glustervolume/"
  config.ssh.insert_key = false
  config.vm.synced_folder ".", "/vagrant", disabled: true
  zone="09"
  network="192.168.0"
  # setup devops user
  config.vm.provision "file", source: "../../shared-files/remove_devops.sh", destination: "/tmp/remove_devops.sh"
  config.vm.provision "file", source: "../../shared-files/reset_environment.sh", destination: "/tmp/reset_environment.sh"
  config.vm.provision "file", source: "../../shared-files/setup_initial_user.sh", destination: "/tmp/setup_initial_user.sh"
  # config.vm.provision "file", source: "../../shared-files/init_cluster.js", destination: "init_cluster.js"
  # config.vm.provision "file", source: "../../shared-files/build_cluster.js", destination: "build_cluster.js"
  config.vm.provision :shell, :inline => "sudo sh /tmp/setup_initial_user.sh"
#   config.vm.provision "shell", inline: "sudo apt-get update; sudo ln -sf /usr/bin/python3 /usr/bin/python"
#   config.vm.provision "ansible" do |ans| 
#     ans.playbook = "setup_initial_user.yaml"
#     ans.inventory_path = "hosts.ini"
#   end
  # network setup
#   config.vm.network "public_network", auto_config: true
  config.vm.network "public_network", :bridge => "eth1", :auto_config => "false", :netmask => "255.255.255.0"

  # default router
  config.vm.provision "shell",
    run: "always",
    inline: "route add default gw 192.168.0.1"

  # config.vm.network "forwarded_port", guest: 8443, host: 8443, auto_correct: true
  config.vm.synced_folder "../shared/", "/shared/dir1", create: true
  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.linked_clone = true
  end

  # config.vm.provision :shell, :inline => "DEBIAN_FRONTEND=noninteractive sed -i '1i192.168.0.131  cd-#{zone}-131' /etc/hosts", :privileged => true
  # config.vm.provision :shell, :inline => "DEBIAN_FRONTEND=noninteractive sed -i '1i192.168.0.132  cd-#{zone}-132' /etc/hosts", :privileged => true
  # config.vm.provision :shell, :inline => "DEBIAN_FRONTEND=noninteractive sed -i '1i192.168.0.133  cd-#{zone}-133' /etc/hosts", :privileged => true


  # (161..163).each do |i|
  #   config.vm.define "cd-#{zone}-#{i}" do |app|
  #     app.vm.hostname = "cd-#{zone}-#{i}"
  #     app.vm.network :public_network, ip: "#{network}.#{i}"
  #     app.vm.provision :shell, path: "lb.sh", env: {"PRIORITY" => "101"}
  #   end
  # end

  # Configs for haproxy 1 (master)
  config.vm.define :lb01 do |lb01_config|
      lb01_config.vm.provider :virtualbox do |vb_config|
          vb_config.name = "HAProxy 1 - lay4-lb-02-web-01"
      end
      lb01_config.vm.hostname = "lb-01"
      lb01_config.vm.network "public_network", ip: "192.168.0.11"
      lb01_config.vm.provision :shell, path: "../../vrrp/lb.sh", env: {"PRIORITY" => "101"}
  end

  # Configs for haproxy 2 (backup)
  config.vm.define :lb02 do |lb02_config|
      lb02_config.vm.provider :virtualbox do |vb_config|
          vb_config.name = "HAProxy 2 - lay4-lb-02-web-02"
      end
      lb02_config.vm.hostname = "lb-02"
      lb02_config.vm.network "public_network", ip: "192.168.0.12"
      lb02_config.vm.provision :shell, path: "../../vrrp/lb.sh", env: {"PRIORITY" => "100"}
  end

  # Configs for web server 1
  config.vm.define :web01 do |web01_config|
      web01_config.vm.provider :virtualbox do |vb_config|
          vb_config.name = "Web Server 1 - lay4-lb-02-web-21"
      end
      web01_config.vm.hostname = "web-21"
      web01_config.vm.network "public_network", ip: "192.168.0.21"
      web01_config.vm.provision :shell, path: "../../vrrp/webserver.sh"
  end

  # Configs for web server 2
  config.vm.define :web02 do |web02_config|
      web02_config.vm.provider :virtualbox do |vb_config|
          vb_config.name = "Web Server 2 - lay4-lb-02-web-22"
      end
      web02_config.vm.hostname = "web-22"
      web02_config.vm.network "public_network", ip: "192.168.0.22"
      web02_config.vm.provision :shell, path: "../../vrrp/webserver.sh"
  end
  
end
