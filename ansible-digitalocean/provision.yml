---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    digital_ocean_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
    droplet_size: s-1vcpu-1gb
    droplet_region: nyc1
    droplet_image: ubuntu-18-04-x64

  tasks:
    - name: "add public ssh key to digitalocean account"
      digital_ocean_sshkey:
        name: "MacBook Pro"
        oauth_token: "{{ digital_ocean_token }}"
        ssh_pub_key: "{{lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present
      register: sshkey_result

    # - name: Create new Droplet.
    #   digital_ocean:
    #     state: present
    #     command: droplet
    #     name: ansibletest
    #     private_networking: yes
    #     size_id: "{{droplet_size}}"
    #     image_id: "{{droplet_image}}"
    #     region_id: "{{droplet_region}}"
    #     # Customize this for your account.
    #     ssh_key_ids: 138954
    #     # Required for idempotence/only one droplet creation.
    #     unique_name: yes
    #   register: do
    # - name: Add new host to our inventory.
    #   add_host:
    #     name: "{{ do.droplet.ip_address }}"
    #     groups: do
    #   when: do.droplet is defined
    #   changed_when: False

    - name: create a new droplet assigning the key
      digital_ocean_droplet:
        name: "{{ item }}"
        oauth_token: "{{ digital_ocean_token }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 600
        unique_name: yes
        ssh_keys: ["{{ sshkey_result.data.ssh_key.id }}"]
        state: absent
      with_inventory_hostnames:
        - web
      register: droplet_result

    - name: save ip and hostname to local hosts file /etc/hosts
      become: yes
      lineinfile:
        path: /etc/hosts
        regexp: ".*{{ item.data.name }}$"
        line: "{{ item.data.networks.v4[1].ip_address }}  {{ item.data.name }}"
      with_items: "{{ droplet_result.results }}"

    - name: Add new host to our inventory.
      add_host:
        name: "{{ item.data.networks.v4[1].ip_address }}"
        groups: droplet_result
      when: droplet_result.droplet is defined
      with_items: "{{ droplet_result.results }}"
      changed_when: False

- hosts: droplet_result
  remote_user: root
  gather_facts: False

  tasks:
    - name: Wait for port 22 to become available.
      local_action: "wait_for port=22 host={{ inventory_hostname }}"

    - name: Install tcpdump.
      apt: name=tcpdump state=present
