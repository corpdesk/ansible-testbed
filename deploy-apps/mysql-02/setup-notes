---------------------------------------------------------------------------------------

1.  SETUP LOCAL REPOSITORY:
    - It is assumed lxd cluster is already set up and running
    - ssh is also setup accross the physical machines emp-09, emp-10. emp-11
    - lxd cluster is also setup accross the 3 machines
    - the cluster members are named routed-x where x is the serial number. 
      routed-9x are hosted in emp-09
      routed-10x are hosted in emp-10
      and routed-11x are hosted in emp-11
 

2.  Launch worker nodes for web services:
    - from one of the cluster members: launch the worker nodes for sql (web-x)
    - lxc exec routed-93 -- lxc launch ubuntu:22.04 web-01
    - spawn 3 containers for web-01 up to web-03
    - install webserver in each of them
    - confirm that all are working

3.  Launch worker nodes for VRRP load balancing services:
    - from one of the cluster members: launch the worker nodes for sql (lb-x)
    - lxc exec routed-93 -- lxc launch ubuntu:22.04 lb-01
    - spawn 3 containers for web-01 up to web-03
    - install webserver in each of them
    - confirm that all are working

4.  Launch worker nodes for cd-sql services:
    - from one of the cluster members: launch the worker nodes for sql (cd-db-x)
    - lxc exec routed-93 -- lxc launch ubuntu:22.04 cd-sql-01
    - spawn 3 containers for web-01 up to web-03
    - install webserver in each of them
    - confirm that all are working

5. ssh setup for worker nodes:
   Ref: /home/emp-06/ansible-testbed/shared-files/workernode.sh 

2. mount glusterfs folder in webroot:

3.  Download mysql server and mysql-shell:
    Conventionally we would have had all the webservers hold a copy of the install file.
    But here is where we start getting the benefits of glusterfs service.
    On the webservicers we have the files downloaded
    rational:
    local repository reduce latency and bandwidth usage due to frequent usage on ephemeral server instances

    mysql server:
    wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-server-core_8.0.32-1ubuntu22.04_amd64.deb
    wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-server-core_8.0.33-1ubuntu22.04_amd64.deb
    wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-server-core_8.0.34-1ubuntu22.04_amd64.deb

    mysql-shell:
    wget https://cdn.mysql.com//Downloads/MySQL-Shell/mysql-shell_8.0.33-1ubuntu22.04_amd64.deb
    wget https://cdn.mysql.com//Downloads/MySQL-Shell/mysql-shell_8.0.34-1ubuntu22.04_amd64.deb

    accessing repository:
    (a) set up VRRP for local repository access
    (b) download from public repository
          # url: https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-server_8.0.31-1ubuntu22.04_amd64.deb-bundle.tar 
          # url: https://cdn.mysql.com//Downloads/MySQL-Shell/mysql-shell_8.0.31-1ubuntu22.04_amd64.deb
          url: "{{ local_repository }}/mysql-shell/mysql-shell_8.0.31-1ubuntu22.04_amd64.deb"
        - create mysql-shell directory
        - download the required files
            - mysql-shell
3.  Set up VRRP for the webservice
2.  INSTAL ANSIBLE:
    sudo apt-add-repository ppa:ansible/ansible
    sudo apt update && sudo apt upgrade -y
    sudo apt install ansible -y

3.  CONFIGURE AND RUN ANSIBLE:
    project-folder: deploy-apps/mysql-02
    playbook: deploy-apps/mysql-02/install-mysql.yaml
    roles installations:
      - ansible-galaxy install -p ./roles dev-sec.mysql-hardening
      - ignore_errors: yes # (apply where necessary)
    ansible-playbook -i hosts.ini install-mysql.yaml -kK -vvv

--------------------------------------------------------------
Testing: mysql -u devops -p
Response:
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 127
Server version: 8.0.33-0ubuntu0.22.04.4 (Ubuntu)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

------------------------------------------------------------------------------------
root@cd-db-01 ~ [1]# mysqlsh --uri mysql://devops:yU0B14NC1PdE@localhost:3306
MySQL Shell 8.0.34

Copyright (c) 2016, 2023, Oracle and/or its affiliates.
Oracle is a registered trademark of Oracle Corporation and/or its affiliates.
Other names may be trademarks of their respective owners.

Type '\help' or '\?' for help; '\quit' to exit.
WARNING: Using a password on the command line interface can be insecure.
Creating a Classic session to 'devops@localhost:3306'
Fetching schema names for auto-completion... Press ^C to stop.
Your MySQL connection id is 133
Server version: 8.0.33-0ubuntu0.22.04.4 (Ubuntu)
No default schema selected; type \use <schema> to set one.
 MySQL  localhost:3306 ssl  JS > 
---------------------------------------------------------------------------------
dba.checkInstanceConfiguration("devops@localhost:3306")
var chk = dba.checkInstanceConfiguration("devops@localhost:3306");

-------------------------------------------------
dba.configureInstance("devops@localhost:3306")
shell.connect("cd@cd-db-01:3306")
-----------------------------------------------------------------
mysqlsh --mysql -u devops -h localhost -P 3306
mysqlsh --uri mysql://user@localhost:3306

-----------------
Automation Script: 
  - https://www.percona.com/blog/setting-up-an-innodb-cluster-with-a-few-lines-of-code/

-------------------------------------------------------------------------------
RESTORE FROM SQL DUMP FILE:
  
  Get dumpfile:
  - lxc file push /home/emp-09/Dump20220829.sql routed-93/home/devops/.cb/Dump20220829.sql
  - lxc exec routed-93 -- lxc file push /home/devops/.cb/Dump20220829.sql cd-db-01/home/devops/.cb/Dump20220829.sql

  Restore data:
  - Ref: https://blog.devart.com/how-to-restore-mysql-database-from-backup.html
  - devops@cd-db-01> mysql -u devops -p
  - mysql> create database cd1213;
  - mysql> use cd1213;
  - mysql> source /home/devops/.cb/Dumpfile.sql;
---------------------------------------------------------------------------------------
https://garutilorenzo.github.io/ansible-role-linux-mysql/
https://github.com/garutilorenzo/ansible-role-linux-mysql
// ----------------------
https://github.com/dev-sec/ansible-mysql-hardening
https://galaxy.ansible.com/devsec/hardening
ansible-galaxy install -p ./roles dev-sec.mysql-hardening
ansible-galaxy install -p ./roles community.mysql.mysql_user

testing: mysql -u root -p

CREATE USER '<user>'@'%' IDENTIFIED BY '<pswd>';
FLUSH PRIVILEGES;
GRANT ALL PRIVILEGES ON *.* TO '<user>'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

// ------------------
https://gist.github.com/rimiti/b1d2410504f8e6cb0b754f3dfd8d999f
https://dev.mysql.com/doc/refman/8.0/en/checking-gpg-signature.html

Run ansible playbook: ansible-playbook -i hosts.ini install-mysql.yaml -kK -vvv



1. wget https://dev.mysql.com/get/mysql-apt-config_0.8.23-1_all.deb
2. sudo dpkg -i mysql-apt-config_0.8.23-1_all.deb
sudo apt-key export 3A798D29 | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/mysql-key.gpg
sudo apt update && sudo apt upgrade
sudo apt install mysql-shell

// -----------------------

edit /etc/hosts file:
replace 
127.0.2.1 orc-server-101-173.test orc-server-101-173 with 
192.168.1.173 orc-server-101-173.test orc-server-101-173

- name: setup mysql host-name in /etc/hosts
    replace:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: '*orc-server-101-173.*'
      replace: '192.168.1.173 orc-server-101-173.test orc-server-101-173'
      backup: yes

09/11/2022

- Deploy vm servers working:
  project-folder: initial-user
  playbook: initial-user/install-vagrant.yaml

- ansible mysql cluster working
  project-folder: deploy-apps/mysql-02
  playbook: deploy-apps/mysql-02/install-mysql.yaml

ToDo:
1. find out how to set and use string of array as a variable in ansible to sort below:
Ref: https://stackoverflow.com/questions/70830956/how-to-pass-the-specific-array-value-to-the-variable-in-ansible

    line: '{{ item }}'
    with_items:
      - "192.168.1.171 {{inventory_zone}}-171"
      - "192.168.1.172 {{inventory_zone}}-172"
      - "192.168.1.173 {{inventory_zone}}-173" 
    
    # inventory can be fetched from db
    # example: https://www.cdata.com/kb/tech/mysql-odbc-ruby.rst

2. any download should be set to use local custom repostiory.
    - eg:
      # url: https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-server_8.0.31-1ubuntu22.04_amd64.deb-bundle.tar 
      # url: https://cdn.mysql.com//Downloads/MySQL-Shell/mysql-shell_8.0.31-1ubuntu22.04_amd64.deb
      url: "{{ local_repository }}/mysql-shell/mysql-shell_8.0.31-1ubuntu22.04_amd64.deb"
    - create mysql-shell directory
    - download the required files
        - mysql-shell

3, inventory should come from one source and feed both playbook and vagrantfile

4. execute mysql-shell files with arguments eg, inventory, primary-ip, 

5. test mysql-server download file for local repostiory method

  




